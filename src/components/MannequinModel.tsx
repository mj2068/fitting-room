/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 public\mannequin2b.glb --output src\components\MannequinBModel.tsx --types --keepnames --keepgroups --exportdefault --transform --keepmeshes --keepmaterials --debug 
Files: public\mannequin2b.glb [35.02MB] > C:\Users\liujr\webdev\fitting-room\src\components\mannequin2b-transformed.glb [4.41MB] (87%)
*/

import * as THREE from "three";
import React, { useEffect } from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF, SkeletonUtils } from "three-stdlib";

type ActionName =
  | "high_heel_pose"
  | "kids_pose"
  | "left_hand_holding"
  | "pose_highheel_holding"
  | "pose_kids_holding"
  | "pose_sneaker_holding"
  | "sneaker_pose"
  | "dress_high_heel"
  | "dress_kids"
  | "dress_sneaker"
  | "purse_high_heel"
  | "purse_kids"
  | "purse_sneaker";

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    polka_dress: THREE.SkinnedMesh;
    polka_dress_1: THREE.SkinnedMesh;
    polka_dress_2: THREE.SkinnedMesh;
    polka_dress_3: THREE.SkinnedMesh;
    gucci_purse: THREE.Mesh;
    purse_black: THREE.Mesh;
    purse_black_1: THREE.Mesh;
    purse_blue_1: THREE.Mesh;
    purse_blue_2: THREE.Mesh;
    purse_brown_1: THREE.Mesh;
    purse_brown_2: THREE.Mesh;
    mannequin: THREE.SkinnedMesh;
    sneaker_right_1: THREE.SkinnedMesh;
    sneaker_right_2: THREE.SkinnedMesh;
    sneaker_left_1: THREE.SkinnedMesh;
    sneaker_left_2: THREE.SkinnedMesh;
    biege_shoe_right: THREE.SkinnedMesh;
    beige_shoe_left: THREE.SkinnedMesh;
    shoe_kids: THREE.SkinnedMesh;
    shoe_kids_right: THREE.SkinnedMesh;
    ["DEF-spine"]: THREE.Bone;
    ["DEF-pelvisL"]: THREE.Bone;
    ["DEF-pelvisR"]: THREE.Bone;
    ["DEF-thighL"]: THREE.Bone;
    ["DEF-thighR"]: THREE.Bone;
    ["DEF-shoulderL"]: THREE.Bone;
    ["DEF-upper_armL"]: THREE.Bone;
    ["DEF-shoulderR"]: THREE.Bone;
    ["DEF-upper_armR"]: THREE.Bone;
    ["DEF-breastL"]: THREE.Bone;
    ["DEF-breastR"]: THREE.Bone;
    dress_root: THREE.Bone;
    root: THREE.Bone;
    root_1: THREE.Bone;
    root_2: THREE.Bone;
    root_3: THREE.Bone;
    root_4: THREE.Bone;
    root_5: THREE.Bone;
  };
  materials: {
    dress: THREE.MeshStandardMaterial;
    dress_belt_buckle: THREE.MeshStandardMaterial;
    dress_belt: THREE.MeshStandardMaterial;
    dress_button: THREE.MeshStandardMaterial;
    gucci_purse: THREE.MeshStandardMaterial;
    purse_black: THREE.MeshStandardMaterial;
    purse_metal: THREE.MeshStandardMaterial;
    purse_blue: THREE.MeshStandardMaterial;
    purse_brown: THREE.MeshStandardMaterial;
    magenta: THREE.MeshStandardMaterial;
    shoe_sneaker: THREE.MeshStandardMaterial;
    shoe_sneaker_lace: THREE.MeshStandardMaterial;
    shoe_beige: THREE.MeshStandardMaterial;
    shoe_kids: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

export default function Model({
  pose = "sneaker",
  purse = null,
  ...props
}: JSX.IntrinsicElements["group"] & { pose?: Poses; purse?: Purses }) {
  const group = React.useRef<THREE.Group>(null);
  const { scene, animations } = useGLTF("/mannequin2-transformed.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone) as GLTFResult;
  const { actions, mixer } = useAnimations(animations as GLTFAction[], group);

  // console.log(materials.purse_black.emissiveIntensity)
  materials.purse_black.emissiveIntensity = 1.2;

  useEffect(() => {
    mixer.stopAllAction();

    const sneakerAnimation = purse
      ? actions.pose_sneaker_holding
      : actions.sneaker_pose;
    const highheelAnimation = purse
      ? actions.pose_highheel_holding
      : actions.high_heel_pose;
    const kidsAnimation = purse ? actions.pose_kids_holding : actions.kids_pose;
    switch (pose) {
      case "sneaker":
        sneakerAnimation?.play();
        actions.dress_sneaker?.play();
        actions.purse_sneaker?.play();
        break;
      case "highheel":
        highheelAnimation?.play();
        actions.dress_high_heel?.play();
        actions.purse_high_heel?.play();
        break;
      case "kids":
        kidsAnimation?.play();
        actions.dress_kids?.play();
        actions.purse_kids?.play();
        break;
      default:
        break;
    }
  }, [actions, mixer, purse, pose]);

  let purseType = null;
  if (purse !== null) {
    switch (purse) {
      case "gucci":
        purseType = (
          <mesh
            name="gucci_purse"
            geometry={nodes.gucci_purse.geometry}
            material={materials.gucci_purse}
            position={[-0.211, -0.805, 0]}
            castShadow
          />
        );
        break;
      case "black":
        purseType = (
          <group name="purse" position={[-0.211, -0.805, 0]}>
            <mesh
              name="purse_black"
              geometry={nodes.purse_black.geometry}
              material={materials.purse_black}
              castShadow
            />
            <mesh
              name="purse_black_1"
              geometry={nodes.purse_black_1.geometry}
              material={materials.purse_metal}
            />
          </group>
        );
        break;
      case "blue":
        purseType = (
          <group name="purse_blue" position={[-0.211, -0.805, 0]}>
            <mesh
              name="purse_blue_1"
              geometry={nodes.purse_blue_1.geometry}
              material={materials.purse_blue}
              castShadow
            />
            <mesh
              name="purse_blue_2"
              geometry={nodes.purse_blue_2.geometry}
              material={materials.purse_metal}
            />
          </group>
        );
        break;
      case "brown":
        purseType = (
          <group name="purse_brown" position={[-0.211, -0.805, 0]}>
            <mesh
              name="purse_brown_1"
              geometry={nodes.purse_brown_1.geometry}
              material={materials.purse_brown}
              castShadow
            />
            <mesh
              name="purse_brown_2"
              geometry={nodes.purse_brown_2.geometry}
              material={materials.purse_metal}
            />
          </group>
        );
        break;
      default:
        break;
    }
  }

  let selectedShoe = null;
  switch (pose) {
    case "sneaker":
      selectedShoe = (
        <>
          <group name="sneaker_right">
            <skinnedMesh
              name="sneaker_right_1"
              geometry={nodes.sneaker_right_1.geometry}
              material={materials.shoe_sneaker}
              skeleton={nodes.sneaker_right_1.skeleton}
              castShadow
            />
            <skinnedMesh
              name="sneaker_right_2"
              geometry={nodes.sneaker_right_2.geometry}
              material={materials.shoe_sneaker_lace}
              skeleton={nodes.sneaker_right_2.skeleton}
            />
          </group>
          <group name="sneaker_left">
            <skinnedMesh
              name="sneaker_left_1"
              geometry={nodes.sneaker_left_1.geometry}
              material={materials.shoe_sneaker}
              skeleton={nodes.sneaker_left_1.skeleton}
              castShadow
            />
            <skinnedMesh
              name="sneaker_left_2"
              geometry={nodes.sneaker_left_2.geometry}
              material={materials.shoe_sneaker_lace}
              skeleton={nodes.sneaker_left_2.skeleton}
            />
          </group>
        </>
      );
      break;
    case "highheel":
      selectedShoe = (
        <>
          <skinnedMesh
            name="biege_shoe_right"
            geometry={nodes.biege_shoe_right.geometry}
            material={materials.shoe_beige}
            skeleton={nodes.biege_shoe_right.skeleton}
            castShadow
          />
          <skinnedMesh
            name="beige_shoe_left"
            geometry={nodes.beige_shoe_left.geometry}
            material={materials.shoe_beige}
            skeleton={nodes.beige_shoe_left.skeleton}
            castShadow
          />
        </>
      );
      break;
    case "kids":
      selectedShoe = (
        <>
          <skinnedMesh
            name="shoe_kids"
            geometry={nodes.shoe_kids.geometry}
            material={materials.shoe_kids}
            skeleton={nodes.shoe_kids.skeleton}
            castShadow
          />
          <skinnedMesh
            name="shoe_kids_right"
            geometry={nodes.shoe_kids_right.geometry}
            material={materials.shoe_kids}
            skeleton={nodes.shoe_kids_right.skeleton}
            castShadow
          />
        </>
      );
      break;
    default:
      break;
  }

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="arma_mannequin">
          <primitive object={nodes["DEF-spine"]} />
          <primitive object={nodes["DEF-pelvisL"]} />
          <primitive object={nodes["DEF-pelvisR"]} />
          <primitive object={nodes["DEF-thighL"]} />
          <primitive object={nodes["DEF-thighR"]} />
          <primitive object={nodes["DEF-shoulderL"]} />
          <primitive object={nodes["DEF-upper_armL"]} />
          <primitive object={nodes["DEF-shoulderR"]} />
          <primitive object={nodes["DEF-upper_armR"]} />
          <primitive object={nodes["DEF-breastL"]} />
          <primitive object={nodes["DEF-breastR"]} />
        </group>
        <group name="arma_polka_dress">
          <primitive object={nodes.dress_root} />
          <group name="polka-dress">
            <skinnedMesh
              name="polka_dress"
              geometry={nodes.polka_dress.geometry}
              material={materials.dress}
              skeleton={nodes.polka_dress.skeleton}
              castShadow
            />
            <skinnedMesh
              name="polka_dress_1"
              geometry={nodes.polka_dress_1.geometry}
              material={materials.dress_belt_buckle}
              skeleton={nodes.polka_dress_1.skeleton}
            />
            <skinnedMesh
              name="polka_dress_2"
              geometry={nodes.polka_dress_2.geometry}
              material={materials.dress_belt}
              skeleton={nodes.polka_dress_2.skeleton}
            />
            <skinnedMesh
              name="polka_dress_3"
              geometry={nodes.polka_dress_3.geometry}
              material={materials.dress_button}
              skeleton={nodes.polka_dress_3.skeleton}
            />
          </group>
        </group>

        <group name="purse_pos" position={[0.211, 0.805, 0]}>
          {purseType}
        </group>
        <primitive object={nodes.root} />
        <primitive object={nodes.root_1} />
        <primitive object={nodes.root_2} />
        <primitive object={nodes.root_3} />
        <primitive object={nodes.root_4} />
        <primitive object={nodes.root_5} />
        <skinnedMesh
          name="mannequin"
          geometry={nodes.mannequin.geometry}
          material={materials.magenta}
          skeleton={nodes.mannequin.skeleton}
          castShadow
          receiveShadow
        />
      </group>

      {selectedShoe}
    </group>
  );
}

useGLTF.preload("/mannequin2-transformed.glb");

export type Poses = "sneaker" | "highheel" | "kids";
export type Purses = null | "gucci" | "black" | "blue" | "brown";
